/********************************************************************
  Copyright Draegerwerk AG & Co. KGaA
  Generated by Rhapsody 7.5.1 
  Component:     Core 
  Configuration: ClearCase
  Model Element: Core::TypedIdentifier
  File Path:     ../../Core/Interface/Base/TypedIdentifier.h
*********************************************************************/

#ifndef Core_Interface_Base_TypedIdentifier_H
#define Core_Interface_Base_TypedIdentifier_H
#include "Identifier.h"
namespace Core {
    //## dependency InputStream
    class InputStream;
    
    //## dependency OutputStream
    class OutputStream;
    
    //## package Core::Interface::Base
    
    //## class TypedIdentifier
    // A "type-safe" Identifier, where the TypeId is fixed (via template parameter).
    // Don't use this class, but the specializations of it!
    // 
    // Users are NOT allowed to DERIVE from any of these classes!!!!
    // There is no VTable in the base class due to performance reasons!!
    // Don't add any attributes to these classes!
    template <Identifier::TypeKey typeId> class TypedIdentifier : public Identifier {
        ////    Constructors and destructors    ////
        
    public :
    
        //## operation TypedIdentifier()
        inline TypedIdentifier();
        
        //## operation TypedIdentifier(const Core::TypedIdentifier<typeId> &)
        inline TypedIdentifier(const Core::TypedIdentifier<typeId> & right);
        
        // The constructor for the type-safe Identifier.
        // 	Similiar to Identifier constructor, only the typeKey is
        // 	missing, because this is fixed by the template parameter.
        //## operation TypedIdentifier(ComponentKey,GroupKey,ElementKey)
        inline TypedIdentifier(const Identifier::ComponentKey& componentKey, const Identifier::GroupKey& groupKey, const Identifier::ElementKey& elementKey);
        
        //## operation TypedIdentifier(unsigned int)
        explicit inline TypedIdentifier(unsigned int intId);
        
        //## operation ~TypedIdentifier()
        inline ~TypedIdentifier();
        
        ////    Operations    ////
        
        //## operation operator!=(const Core::TypedIdentifier<typeId> &) const
        inline bool operator!=(const Core::TypedIdentifier<typeId> & right) const;
        
        //## operation operator<(const Core::TypedIdentifier<typeId> &) const
        inline bool operator<(const Core::TypedIdentifier<typeId> & right) const;
        
        //## operation operator<=(const Core::TypedIdentifier<typeId> &) const
        inline bool operator<=(const Core::TypedIdentifier<typeId> & right) const;
        
        //## operation operator=(const Core::TypedIdentifier<typeId> &)
        inline Core::TypedIdentifier<typeId> & operator=(const Core::TypedIdentifier<typeId> & right);
        
        //## operation operator==(const Core::TypedIdentifier<typeId> &) const
        inline bool operator==(const Core::TypedIdentifier<typeId> & right) const;
        
        //## operation operator>(const Core::TypedIdentifier<typeId> &) const
        inline bool operator>(const Core::TypedIdentifier<typeId> & right) const;
        
        //## operation operator>=(const Core::TypedIdentifier<typeId> &) const
        inline bool operator>=(const Core::TypedIdentifier<typeId> & right) const;
        
        // packs this to given stream
        //## operation pack(OutputStream&) const
        void pack(OutputStream& stream) const;
        
        // read stream and sets attributes of this
        //## operation unpack(const InputStream&)
        void unpack(const InputStream& stream);
    };
    
    //## package Core::Interface::Base
    
    //## class TypedIdentifier
    template <Identifier::TypeKey typeId> inline TypedIdentifier<typeId>::TypedIdentifier() : Identifier (Identifier::ComponentKey(0,0), 0, typeId, 0) 
      {
        //#[ operation TypedIdentifier()
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline TypedIdentifier<typeId>::TypedIdentifier(const Core::TypedIdentifier<typeId> & right) : Identifier (right) 
      {
        //#[ operation TypedIdentifier(const Core::TypedIdentifier<typeId> &)
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline TypedIdentifier<typeId>::TypedIdentifier(const Identifier::ComponentKey& componentKey, const Identifier::GroupKey& groupKey, const Identifier::ElementKey& elementKey) : Identifier (componentKey, groupKey, typeId, elementKey) 
      {
        //#[ operation TypedIdentifier(ComponentKey,GroupKey,ElementKey)
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline TypedIdentifier<typeId>::TypedIdentifier(unsigned int intId) : Identifier (checkUInt32Consistency (intId,
                                                         typeId)) {
        //#[ operation TypedIdentifier(unsigned int)
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline TypedIdentifier<typeId>::~TypedIdentifier() {
        //#[ operation ~TypedIdentifier()
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator!=(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator!=(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator!=(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator<(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator<(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator<(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator<=(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator<=(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator<=(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline Core::TypedIdentifier<typeId> & TypedIdentifier<typeId>::operator=(const Core::TypedIdentifier<typeId> & right) {
        //#[ operation operator=(const Core::TypedIdentifier<typeId> &)
        if (this != &right)
        {
          Identifier::operator=(right);
        }
        
        return *this;
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator==(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator==(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator==(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator>(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator>(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator>(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> inline bool TypedIdentifier<typeId>::operator>=(const Core::TypedIdentifier<typeId> & right) const {
        //#[ operation operator>=(const Core::TypedIdentifier<typeId> &) const
        return Identifier::operator>=(right);
        //#]
    }
    
    template <Identifier::TypeKey typeId> void TypedIdentifier<typeId>::pack(OutputStream& stream) const {
        //#[ operation pack(OutputStream&) const
        
             StreamUtility::putUInt32ToStream (stream,
                                               getInternal ());
        
        //#]
    }
    
    template <Identifier::TypeKey typeId> void TypedIdentifier<typeId>::unpack(const InputStream& stream) {
        //#[ operation unpack(const InputStream&)
        
             // this checks consistency of read UInt32 and sets it as internal
             // on consistency errors a PackingException will be thrown
             checkAndAssignUInt32 (StreamUtility::getUInt32FromStream (stream),
                                   typeId);
        
        //#]
    }
}

#endif

/********************************************************************
  Copyright Draegerwerk AG & Co. KGaA
  Generated by Rhapsody 7.5.1 
  Component:     Core 
  Configuration: ClearCase
  Model Element: makeGroupIdentifier
  File Path:     ../../Core/Interface/Base/GroupIdentifier.h
*********************************************************************/

#ifndef Core_Interface_Base_GroupIdentifier_H
#define Core_Interface_Base_GroupIdentifier_H

#include "Core/Interface/Base/CoreExImp.h"
//## dependency Identifier
#include "Core/Interface/Base/Identifier.h"
//## class GroupIdentifier
#include "Core/Interface/Base/TypedIdentifier.h"
namespace Core {
    //## operation TypedIdentifier(ComponentKey,GroupKey)
    class ComponentKey;
    
    //## operation TypedIdentifier(ComponentKey,GroupKey)
    class GroupKey;
    
    //## operation makeGroupIdentifier(Identifier)
    class Identifier;
    
    //## package Core::Interface::Base
    
    //## class TypedIdentifier<Identifier::UndefinedType>
    template <> class CORE_EXIMP TypedIdentifier<Identifier::UndefinedType> : public Identifier {
        ////    Constructors and destructors    ////
        
    public :
    
        //## operation TypedIdentifier()
        inline TypedIdentifier() : Identifier() {
            //#[ operation TypedIdentifier()
            //#]
        }
        
        //## operation TypedIdentifier(Identifier)
        inline TypedIdentifier(const Identifier& right) : Identifier(right.getCombinedGroupId()) {
            //#[ operation TypedIdentifier(Identifier)
            //#]
        }
        
        //## operation TypedIdentifier(ComponentKey,GroupKey)
        inline TypedIdentifier(const Identifier::ComponentKey& componentKey, const Identifier::GroupKey& groupKey) : Identifier(componentKey, groupKey, Identifier::UndefinedType, 0U) {
            //#[ operation TypedIdentifier(ComponentKey,GroupKey)
            //#]
        }
        
        //## operation TypedIdentifier(UInt32)
        explicit inline TypedIdentifier(UInt32 intId) : Identifier(checkUInt32Consistency(intId,Identifier::UndefinedType)) {
            //#[ operation TypedIdentifier(UInt32)
            //#]
        }
        
        //## operation ~TypedIdentifier()
        inline ~TypedIdentifier() {
            //#[ operation ~TypedIdentifier()
            //#]
        }
        
        ////    Operations    ////
        
        //## operation operator!=(Identifier) const
        inline bool operator!=(const Identifier& right) const {
            //#[ operation operator!=(Identifier) const
            return Identifier::operator!=(right);
            //#]
        }
        
        //## operation operator<(Identifier) const
        inline bool operator<(const Identifier& right) const {
            //#[ operation operator<(Identifier) const
            return Identifier::operator<(right);
            //#]
        }
        
        //## operation operator<=(Identifier) const
        inline bool operator<=(const Identifier& right) const {
            //#[ operation operator<=(Identifier) const
            return Identifier::operator<=(right);
            //#]
        }
        
        //## operation operator=(Identifier)
        inline TypedIdentifier<Identifier::UndefinedType>& operator=(const Identifier& right) {
            //#[ operation operator=(Identifier)
            if (this != &right)
            {
              Identifier::operator=(right.getCombinedGroupId ());
            }
            return *this;
            
            //#]
        }
        
        //## operation operator==(Identifier) const
        inline bool operator==(const Identifier& right) const {
            //#[ operation operator==(Identifier) const
            return Identifier::operator==(right);
            //#]
        }
        
        //## operation operator>(Identifier) const
        inline bool operator>(const Identifier& right) const {
            //#[ operation operator>(Identifier) const
            return Identifier::operator>(right);
            //#]
        }
        
        //## operation operator>=(Identifier) const
        inline bool operator>=(const Identifier& right) const {
            //#[ operation operator>=(Identifier) const
            return Identifier::operator>=(right);
            //#]
        }
        
        //## operation pack(Core::OutputStream&) const
        inline void pack(Core::OutputStream& stream) const {
            //#[ operation pack(Core::OutputStream&) const
                    StreamUtility::putUInt32ToStream (stream,
                                                      getInternal ());
            //#]
        }
        
        //## operation unpack(const Core::InputStream&)
        inline void unpack(const Core::InputStream& stream) {
            //#[ operation unpack(const Core::InputStream&)
            // this checks consistency of read UInt32 and sets it as internal  on consistency errors a PackingException will be thrown
            checkAndAssignUInt32 (StreamUtility::getUInt32FromStream (stream),
            Identifier::UndefinedType);
            
            //#]
        }
    };
    
    //## package Core::Interface::Base
    
    //## class TypedIdentifier<Identifier::UndefinedType>
    
    //## package Core::Interface::Base
    
    //## class GroupIdentifier
    // Type safe Identifier for Groups (group of Items)
    typedef TypedIdentifier<Identifier::UndefinedType> GroupIdentifier;
    
    //## operation ::Core::Interface::Base::TopLevel.makeGroupIdentifier(Identifier)
    inline GroupIdentifier makeGroupIdentifier(const Identifier& id) {
        //#[ operation ::Core::Interface::Base::TopLevel.makeGroupIdentifier(Identifier)
        return GroupIdentifier (id);
        //#]
    }
    
    //## package Core::Interface::Base
    
    //## class GroupIdentifier
}

#endif
